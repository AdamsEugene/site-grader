import { useState, useEffect } from "react";
import AppButton from "../components/AppButton";
import AppNavbar from "../components/AppNavbar";
import AppFooter from "../components/AppFooter";
import { useNavigate, useLocation } from "react-router-dom";
import useCategoryProducts from "../hooks/useCategoryProducts";

// Define the types for steps and their structure
interface Step {
  id: number;
  question: string;
  options: string[]; // Could be either a string or an object with label and value
}

export default function Form1() {
  const [activeStep, setActiveStep] = useState(1);
  const [productService, setProductService] = useState<string>("");
  const [steps, setSteps] = useState<Step[]>([]); // Set the steps type to an array of Step objects
  const navigate = useNavigate();
  const location = useLocation();

  const { data, loading, error } = useCategoryProducts(); // Adjust with actual endpoint

  // Set steps dynamically based on the API data
  useEffect(() => {
    if (data) {
      setSteps([
        {
          id: 1,
          question:
            "What kinds of products and services do you offer on your site?",
          options: data.product_services,
        },
        {
          id: 2,
          question:
            "What is the average annual revenue generated by this site?",
          options: data.annual_revenue,
        },
      ]);
    }
  }, [data]);

  const handleNextClick = (value?: string) => {
    if (activeStep < steps.length) {
      if (value) {
        setProductService(value);
      }
      setActiveStep(activeStep + 1);
    } else if (activeStep === steps.length) {
      if (value) {
        setProductService(value);
      }
      const email = ""; // Set email value if needed

      // Navigate to the next page when all steps are completed
      navigate("/dashboard", {
        state: {
          site_url: location.state?.url, // Retaining the url from previous page
          product_service: productService,
          average_revenue: value,
          email: email,
        },
      });
    }
  };

  const handleBackClick = () => {
    setActiveStep(activeStep > 1 ? activeStep - 1 : 1);
  };

  // Return early if steps are still undefined
  if (!steps.length || loading) {
    return <div>Loading...</div>; // You can return a loading spinner here while the data is being fetched
  }

  if (!loading && error) {
    return <div>Error Occured! Unable to get data</div>; // You can return a loading spinner here while the data is being fetched
  }

  return (
    <div className="relative flex flex-col h-screen overflow-hidden">
      <AppNavbar
        showControls
        onNextClick={() => handleNextClick()}
        onBackClick={handleBackClick}
        loaderProgress={(activeStep / steps.length) * 100}
      />

      <div className="overflow-auto">
        <div className="px-3 mx-auto grow py-10 w-full max-w-sm space-y-4">
          <p className="text-sm text-gray-400">
            {activeStep} of {steps.length}
          </p>
          <p>{steps[activeStep - 1]?.question}</p>

          <div className="space-y-2">
            {steps[activeStep - 1]?.options.map((option, index) => (
              <AppButton
                key={index}
                label={option}
                className="w-full text-left"
                onClick={() => {
                  handleNextClick(option);
                }}
              />
            ))}
          </div>
        </div>
      </div>

      <AppFooter />
      <div className="px-3 sm:hidden mx-auto grow-1 py-3 w-full max-w-sm space-y-4">
        <AppButton
          label="Exit"
          className="border-0 text-emerald-700 disabled:text-gray-400 bg-gray-200 w-full"
          onClick={() => handleNextClick()}
        />
        <AppButton
          onClick={handleBackClick}
          label="Back"
          className="border-0 w-full text-emerald-700"
        />
      </div>
    </div>
  );
}
